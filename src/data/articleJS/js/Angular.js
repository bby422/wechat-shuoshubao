export default "# 指令 ng-\n\n* ng-app\n* ng-model\n* ng-eventType\n* ng-controller\n\n> 指令都写在html标签中\n\n# 服务 $\n\n* $rootScope\n* $scope\n\n```\n$scope.$watch(str, function(newVal, oldVal) {} [, ifWatchAll])\n$scope.$watch(function(){})\n```\n\n* $timeout\n* $interval\n  * $interval.cancel()\n* $filter\n\n> 依赖注入：需要什么服务，就在形参列表中添加服务名, 服务都写在函数中\n\n* $timeout(function() {});\n* $interval(function() {});\n* $filter('filterName')(arg1, arg2, arg3);\n\n# 过滤器 filter\n\n* currency\n* number\n* date\n* json\n* limitTo\n* filter\n* orderBy\n* lowercase/uppercase\n\n> 写在 \\{ filter : arg1 : arg2 : arg3 \\} 中\n\n> \\| 称为 `管道`\n\n> `:` 后面是`参数`，多个参数用多个 `:`\n\n# 模块化\n\n* angular.module()\n* controller()\n* run()\n* filter()\n\n```\nvar mod1 = angular.module('appName', [需要依赖的模块数组]);\nmod1.controller('Aaa', ['$scope', '$rootScope', function($scope, $rootScope) {}]);\nmod1.run(['$rootScope', function($rootScope) {}]);\nmod1.filter('filterName', function(){\n  return function(str) {\n    return str\n  }\n});\n```\n\n# 工具方法\n\n* angular.module()\n* angular.bind()\n* angular.copy()\n* angular.extend()\n* angular.isNumber()\n* angular.isString()\n* angular.isUndefined()\n* angular.isDefined()\n* angular.isObject()\n* angular.isDate()\n* angular.isArray()\n* angular.isFunction()\n* angular.isElement()\n* angular.version\n* angular.equeals()\n* angular.forEach()\n* angular.element()\n* angular.identity()\n* angular.noop()\n* angular.lowercase()\n* angular.uppercase()\n* angular.bootstrap()\n* angular.injector()\n\n> angular.element() 底下有一堆的DOM操作函数，类似于jQuery\n\n# jqLite\n\n* angular.element()\n* prop()\n* attr() * Does not support functions as parameters\n* css() * Only retrieves inline-styles, does not call getComputedStyle()\n* hasClass()\n* addClass()\n* removeClass()\n* toggleClass()\n* clone()\n* after()\n* append()\n* prepend()\n* detach()\n* empty()\n* remove()\n* wrap()\n* replaceWith()\n* on() : Does not support namespaces, selectors or eventData\n* one() : Does not support namespaces or selectors\n* off() : Does not support namespaces or selectors\n* bind() : Does not support namespaces, selectors or eventData\n* unbind() : Does not support namespaces\n* triggerHandler() * Passes a dummy event object to handlers.\n* find() * Limited to lookups by tag name\n* eq()\n* children() * Does not support selectors\n* parent() * Does not support selectors\n* next() * Does not support selectors\n* ready()\n* contents()\n* data()\n* removeData()\n* val()\n* text()\n* html()\n* removeAttr()\n\n# 迭代指令\n* $index\n* $first\n* $middle\n* $last\n* $even\n* $odd\n* ng-repeat-start\n* ng-repeat-end\n\n# 事件指令\n\n* ng-click/dblclick\n* ng-mousedown/up\n* ng-mouseenter/leave\n* ng-mousemove/over/out\n* ng-keydown/up/press\n* ng-focus/blur\n* ng-submit\n* ng-selected\n* ng-change\n* ng-copy\n* ng-cut\n* ng-paste\n\n> `ng-change` 必须和 `ng-model` 同时存在\n\n# input指令\n\n* ng-disabled\n* ng-readonly\n* ng-checked\n* ng-value\n\n* ng-bind\n* ng-bind-template\n* ng-bind-html\n* ng-cloak\n* ng-non-bindable\n\n# 属性指令\n\n* ng-class\n* ng-style\n* ng-href\n* ng-src\n* ng-attr-(suffix)\n\n> 注：表达式必须在 `{}` 中，其他的指令必须是在字符串中\n\n# 样式指令\n\n* ng-show\n* ng-hide\n* ng-if\n* ng-swtich\n  * on\n  * default\n  * when\n* ng-open\n\n# DOM指令\n\n* ng-init\n* ng-include\n* ng-model\n  * ng-model-option\n  * updateOn\n* ng-controller\n  * as\n\n> `ng-model-option` 的值 \\{\\} 中\n\n# 标签指令\n\n* \\<a\\>\n* \\<select\\>\n  * ng-options\n  * for in\n* \\<textarea\\>\n* \\<input\\>\n* \\<form\\>\n\n# 表单验证\n\n* $valid\n* $invalid\n* $pristine\n* $dirty\n* $error\n* ng-minlength\n* ng-maxkength\n* ng-pattern\n\n```\nng-valid\nng-invalid\nng-pristine\nng-dirty\n```\n\n> 1. novalidate\n> 2. `name` 的方式进行查找\n> 3. 配合 `ng-model`\n\n# 自定义指令\n\ndirective (angular.module)\n\n```\nmod.directive('directiveName', function() {\n  return {\n    restrict: 'AECM',\n    replace: false | true,\n    transclude: false | true,\n    template: 'str',\n    templateUrl: 'url',\n    scope: false | true | {},\n    controller: ['$scope', function($scope) {}],\n    link: function(scope, element, attr, reController) {}\n  }\n});\n```\n\n* restrict\n  * A: attribute\n  * E: element\n  * C: class\n  * M: comment\n\n* transclude\n\n> 配合 `ng-transclude`\n\n* template / templateUrl : 模板\n* scope\n  * false\n  * true : 独立作用域\n  * {} : 隔离作用域 ： 传入数据\n    * 绑定策略\n    * @ : 绑定空字符串\n    * = : 绑定变量\n    * & : 绑定函数\n* controller : 定义共享属性和方法\n* link : DOM操作\n\n\n\n# $http服务\n\n* method : GET / POST / JSONP\n* url : ''\n* params: json\n* data : string / json\n* headers : object\n* transformRequest : fn\n* transformResponse : fn\n* cache : boolean / Cache object\n* timeout : number\n* widthCredentials : boolean\n\n# $location服务\n\n* absUrl()\n* path()\n* hash()\n* search()\n* replace()\n* host\n* port()\n* protocol()\n\n# $anchorScroll服务\n\n* $anchorScroll()\n\n# $cacheFactory服务\n\n```\nvar cache = $cacheFactory(name[, {capacity: num}])\n```\n\n* info()\n  * id\n  * size\n  * [capacity]\n* put(name, value)\n* get(name)\n* remove()\n\n# $log服务\n\n* log()\n* info()\n* warn()\n* error()\n\n# $interpolate服务\n\n# $q服务\n\n* defer()\n* resolve()\n* reject()\n* notify()\n* then()\n* promise\n\n> promise的实现\n\n# 供应商\n\n> 服务的相关初始配置操作\n\n* config()\n  * provider\n  * $interpolateProvider\n    * startSymbol()\n    * endSymbol()\n  * $logProvider\n    * debugEnabled()\n  * $anchorScrollProvider\n    * disableAutoScrolling()\n\n# factory 自定义服务\n\n```\nmod.factory('serviceName', ['', '', function() {\n  return {\n\n  }\n}]);\n```\n\n> 不能进行初始化配置，即没有供应商\n\n# provider 自定义服务\n\n```\nmod.provider('serviceName', [function() {\n  return {\n    $get: function() {\n\n    }\n  }\n}]);\n```\n\n> $get\n>\n> 可以使用供应商\n\n# constant / value\n\n> 都是定义常量，但constant可以使用config, 且不用加Provider后缀\n"