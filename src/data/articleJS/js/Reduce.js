export default "> 虽然你去百度上搜索 `reduce`, 发现只给了一个求和这一个demo, 但别以为reduce的作用就止于求和\n\n# Number\n\n## 求和\n\n```\nconst sum = arr => arr.reduce((prev, cur) => prev + cur)\n```\n\n## 极值\n\n```\nconst min = arr => arr.reduce((prev, cur) => Math.min(prev, cur))\nconst max = arr => arr.reduce((prev, cur) => Math.max(prev, cur))\n```\n\n## 阶乘\n\n```\nconst factorial = N => Array.from(Array(N), (v, i) => i + 1).reduce((prev, cur) => prev * cur)\n\nfactorial(5) // 120\n```\n\n# Array\n\n```\n// 需求\n// 数据源\nconst data = [\n  '1000001001',\n  '1000001002',\n  '1000001003',\n  '2000001009',\n  '2000001008',\n]\n// 需要得到\n{\n  '10000': ['1000001001', '1000001002', '1000001003'],\n  '20000': ['200001009', '200001008']\n}\n\nconst convertArrayToJson = arr => arr.reduce((prev, cur) => {\n  const short = cur.slice(0, 6)\n  const temp = prev[short]\n  if(temp) {\n    prev[short].push(cur)\n  }else {\n    prev[short] = [cur]\n  }\n  return prev\n}, {})\n\nconst ret = convertArrayToJson(data)\n```\n\n# Object\n\n## filter 筛选对象\n\n```\nconst filter = (json, attrs) => attrs.reduce((prev, cur) => {\n  prev[cur] = json[cur]\n  return prev\n}, {})\n\nconst data = {\n  name: 'shuoshubao',\n  age: 25,\n  sex: 1\n}\n\nconst filterData = filter(data, ['name', 'age'])\n// {name: 'shuoshubao', age: 25}\n```\n\n## omit 过滤对象\n\n```\nconst omit = (json, attrs) => Object.keys(data).filter(v => !attrs.includes(v)).reduce((prev, cur) => {\n  prev[cur] = json[cur]\n  return prev\n}, {})\n\nconst data = {\n  name: 'shuoshubao',\n  age: 25,\n  sex: 1\n}\n\nconst omitData = omit(data, ['name', 'age'])\n// {sex: 1}\n```\n"